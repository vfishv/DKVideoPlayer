apply plugin: 'com.android.application'
apply from: '../constants.gradle'

static def releaseTime() {
    return new Date().format("yyyy_MM_dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion

    /*
    //https://developer.android.com/ndk/guides/abis.html
    splits {
        // Configures multiple APKs based on ABI.
        abi {
            // Enables building multiple APKs per ABI.
            enable true
            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()
            // Specifies a list of ABIs that Gradle should create APKs for.
            include 'armeabi-v7a'
            //include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a', 'armeabi', 'mips' //select ABIs to build APKs for

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false //generate an additional APK that contains all the ABIs
        }
    }
    */

    defaultConfig {
        applicationId "com.dueeeke.dkplayer"
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode project.ext.releaseVersionCode
        versionName project.ext.releaseVersion

        ndk {
            //使用abiFilters过滤不需要的so，此处仅保留armeabi-v7a
//            abiFilters "armeabi-v7a"
        }
    }


    signingConfigs {
        release {
            storeFile file("../devlin.jks")
            storePassword KEYSTORE_PWD
            keyAlias KEY_ALIAS
            keyPassword KEY_PWD
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }


    buildTypes {
        debug {
            signingConfig signingConfigs.release
            zipAlignEnabled false
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.release
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${variant.name}-${variant.versionName}-${releaseTime()}(${variant.versionCode}).apk"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-beta-3'
    implementation "androidx.recyclerview:recyclerview:1.0.0"
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    implementation 'com.yanzhenjie.permission:support:2.0.1'
    implementation 'com.github.ctiao:DanmakuFlameMaster:0.9.25'
    implementation 'com.github.ctiao:ndkbitmap-armv7a:0.9.21'
    implementation "com.google.android.material:material:1.0.0"
    implementation 'com.google.code.gson:gson:2.8.6'

    implementation project(':dkplayer-java')
    implementation project(':dkplayer-ui')
    implementation project(path: ':dkplayer-players:ijk')
    //implementation project(path: ':dkplayer-players:exo')
    //缓存
    implementation project(':dkplayer-videocache')


//    implementation 'com.github.dueeeke.dkplayer:dkplayer-java:3.1.3'
//    implementation 'com.github.dueeeke.dkplayer:dkplayer-ui:3.1.3'
//
//    implementation 'com.github.dueeeke.dkplayer:player-exo:3.1.3'
//
//    implementation 'com.github.dueeeke.dkplayer:player-ijk:3.1.3'
}
